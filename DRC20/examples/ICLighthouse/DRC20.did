type TxnResult = 
 variant {
   err:
    record {
      code:
       variant {
         InsufficientAllowance;
         InsufficientBalance;
         InsufficientGas;
         LockedTransferExpired;
         NonceError;
         UndefinedError;
       };
      message: text;
    };
   ok: Txid;
 };
type TxnRecord = 
 record {
   caller: AccountId;
   gas: Gas;
   index: nat;
   msgCaller: opt principal;
   nonce: nat;
   timestamp: Time;
   transaction: Transaction;
   txid: Txid;
 };
type TxnQueryResponse = 
 variant {
   getEvents: vec TxnRecord;
   getTxn: opt TxnRecord;
   lastTxids: vec Txid;
   lastTxidsGlobal: vec Txid;
   lockedTxns: record {
                 lockedBalance: nat;
                 txns: vec TxnRecord;
               };
   txnCount: nat;
   txnCountGlobal: nat;
 };
type TxnQueryRequest = 
 variant {
   getEvents: record {owner: opt Address;};
   getTxn: record {txid: Txid;};
   lastTxids: record {owner: Address;};
   lastTxidsGlobal;
   lockedTxns: record {owner: Address;};
   txnCount: record {owner: Address;};
   txnCountGlobal;
 };
type Txid = blob;
type Transaction = 
 record {
   data: opt blob;
   from: AccountId;
   operation: Operation;
   to: AccountId;
   value: nat;
 };
type To = text;
type Timeout = nat32;
type Time = int;
type Subscription = 
 record {
   callback: Callback;
   msgTypes: vec MsgType;
 };
type Spender = text;
type Sa = vec nat8;
type Operation = 
 variant {
   approve: record {allowance: nat;};
   executeTransfer: record {
                      fallback: nat;
                      lockedTxid: Txid;
                    };
   lockTransfer: record {
                   decider: AccountId;
                   expiration: Time;
                   locked: nat;
                 };
   transfer: record {action: variant {
                               burn;
                               mint;
                               send;
                             };};
 };
type Nonce = nat;
type MsgType = 
 variant {
   onApprove;
   onExecute;
   onLock;
   onTransfer;
 };
type Metadata = 
 record {
   content: text;
   name: text;
 };
type InitArgs = 
 record {
   decimals: nat8;
   founder: opt Address;
   gas: Gas;
   metadata: opt vec Metadata;
   name: opt text;
   symbol: opt text;
   totalSupply: nat;
 };
type Gas = 
 variant {
   cycles: nat;
   noFee;
   token: nat;
 };
type From = text;
type ExecuteType = 
 variant {
   fallback;
   send: nat;
   sendAll;
 };
type Decider = text;
type Data = blob;
type CoinSeconds = record { coinSeconds: nat; updateTime: int; };
type Callback = func (TxnRecord) -> ();
type Amount = nat;
type Allowance = 
 record {
   remaining: nat;
   spender: AccountId;
 };
type Address = text;
type AccountId = blob;
type DRC20 = service {
   allowance: (Address, Spender) -> (Amount) query;
   approvals: (Address) -> (vec Allowance) query;
   approve: (Spender, Amount, opt Nonce, opt Sa, opt Data) -> (TxnResult);
   balanceOf: (Address) -> (Amount) query;
   cyclesBalanceOf: (Address) -> (nat) query;
   cyclesReceive: (opt Address) -> (nat);
   decimals: () -> (nat8) query;
   executeTransfer: (Txid, ExecuteType, opt To, opt Nonce, opt Sa,
    opt Data) -> (TxnResult);
   gas: () -> (Gas) query;
   lockTransfer: (To, Amount, Timeout, opt Decider, opt Nonce, opt Sa,
    opt Data) -> (TxnResult);
   lockTransferFrom: (From, To, Amount, Timeout, opt Decider, opt Nonce,
    opt Sa, opt Data) -> (TxnResult);
   metadata: () -> (vec Metadata) query;
   name: () -> (text) query;
   standard: () -> (text) query;
   subscribe: (Callback, vec MsgType, opt Sa) -> (bool);
   subscribed: (Address) -> (opt Subscription) query;
   symbol: () -> (text) query;
   totalSupply: () -> (Amount) query;
   transfer: (To, Amount, opt Nonce, opt Sa, opt Data) -> (TxnResult);
   transferFrom: (From, To, Amount, opt Nonce, opt Sa, opt Data) ->
    (TxnResult);
   txnQuery: (TxnQueryRequest) -> (TxnQueryResponse) query;
   txnRecord : (Txid) -> (opt TxnRecord);
   getCoinSeconds: (opt Address) -> (CoinSeconds, opt CoinSeconds) query;
 };
service : (InitArgs) -> DRC20