type TxnRecord = 
 record {
   caller: AccountId;
   gas: Gas;
   index: nat;
   msgCaller: opt principal;
   nonce: nat;
   timestamp: Time;
   transaction: Transaction;
   txid: Txid;
 };
type Txid = blob;
type Transaction = 
 record {
   data: opt blob;
   from: AccountId;
   operation: Operation;
   to: AccountId;
   value: nat;
 };
type Token = principal;
type Time = int;
type Sid = blob;
type Operation = 
 variant {
   approve: record {allowance: nat;};
   executeTransfer: record {
                      fallback: nat;
                      lockedTxid: Txid;
                    };
   lockTransfer: record {
                   decider: AccountId;
                   expiration: Time;
                   locked: nat;
                 };
   transfer: record {action: variant {
                               burn;
                               mint;
                               send;
                             };};
 };
type Hex = text;
type Gas = 
 variant {
   cycles: nat;
   noFee;
   token: nat;
 };
type BucketInfo = 
 record {
   count: nat;
   cycles: nat;
   heap: nat;
   memory: nat;
   stableMemory: nat32;
 };
type AccountId = blob;
type BucketActor = 
 service {
   bucketInfo: () -> (BucketInfo) query;
   last: () -> (Sid, Time) query;
   txn: (Token, Txid) -> (opt record { TxnRecord; Time; }) query;
   txnHistory: (Token, Txid) -> (vec record { TxnRecord; Time; }) query;
   txnByAccountId: (AccountId, opt Token, opt nat32, opt nat32) -> (record{data: vec record{Token; vec record{TxnRecord; Time}}; totalPage: nat; total: nat}) query;
   txnByIndex: (Token, nat) -> (vec record { TxnRecord; Time; }) query;
   txnHash: (Token, Txid, nat) -> (opt Hex) query;
   txnBytes: (Token, Txid) -> (opt record { vec nat8; Time; }) query;
   txnBytes2: (Sid) -> (opt record { vec nat8; Time; }) query;
   txnBytesHistory: (Token, Txid) -> (vec record { vec nat8; Time; }) query;
   txnBytesHash: (Token, Txid, nat) -> (opt Hex) query;
 };
service : () -> BucketActor
