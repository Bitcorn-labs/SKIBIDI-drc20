type TxnRecord = 
 record {
   caller: AccountId;
   gas: Gas;
   index: nat;
   msgCaller: opt principal;
   nonce: nat;
   timestamp: Time;
   transaction: Transaction;
   txid: Txid;
 };
type Txid = blob;
type Transaction = 
 record {
   data: opt blob;
   from: AccountId;
   operation: Operation;
   to: AccountId;
   value: nat;
 };
type TokenInfo = 
 record {
   count: nat;
   lastIndex: nat;
   lastTxid: Txid;
 };
type Token = principal;
type Time = int;
type Operation = 
 variant {
   approve: record {allowance: nat;};
   executeTransfer: record {
                      fallback: nat;
                      lockedTxid: Txid;
                    };
   lockTransfer: record {
                   decider: AccountId;
                   expiration: Time;
                   locked: nat;
                 };
   transfer: record {action: variant {
                               burn;
                               mint;
                               send;
                             };};
 };
type Gas = 
 variant {
   cycles: nat;
   noFee;
   token: nat;
 };
type BucketInfo = 
 record {
   count: nat;
   cycles: nat;
   heap: nat;
   memory: nat;
   stableMemory: nat32;
 };
type Bucket = principal;
type AccountId = blob;
type ProxyActor = 
 service {
   bucket: (Token, Txid, nat, opt nat8) -> (opt Bucket) query;
   bucketInfo: (opt Bucket) -> (Bucket, BucketInfo);
   fee: () -> (nat) query;
   generateTxid: (Token, AccountId, nat) -> (Txid) query;
   getLastTxns: () -> (vec record { nat; Token; nat; Txid; }) query;
   minInterval: () -> (int) query;
   standard: () -> (text) query;
   stats: () ->
    (record {
       bucketCount: nat;
       errCount: nat;
       storeErrPool: nat;
       tokenCount: nat;
       txnCount: nat;
     }) query;
   storeBatch: (vec TxnRecord) -> ();
   storeBytesBatch: (vec record { Txid; vec nat8; }) -> ();
   tokenInfo: (Token) -> (opt text, opt TokenInfo) query;
   version: () -> (nat8) query;
 };
service : () -> ProxyActor
