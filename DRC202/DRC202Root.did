type Time = int;
type Token = principal;
type Txid = blob;
type AccountId = blob;
type Hex = text;
type Transaction = 
 record {
   data: opt blob;
   from: AccountId;
   operation: Operation;
   to: AccountId;
   value: nat;
 };
type Operation = 
 variant {
   approve: record {allowance: nat;};
   executeTransfer: record {
                      fallback: nat;
                      lockedTxid: Txid;
                    };
   lockTransfer: record {
                   decider: AccountId;
                   expiration: Time;
                   locked: nat;
                 };
   transfer: record {action: variant {
                               burn;
                               mint;
                               send;
                             };};
 };
type Gas = 
 variant {
   cycles: nat;
   noFee;
   token: nat;
 };
type TxnRecord = 
 record {
   caller: AccountId;
   gas: Gas;
   index: nat;
   msgCaller: opt principal;
   nonce: nat;
   timestamp: Time;
   transaction: Transaction;
   txid: Txid;
 };
type ProxyRoot = 
 service {
    proxyList : () -> (record {root: principal; list: vec record {principal; Time; nat}; current: opt record {principal; Time; nat} }) query;
    getTxnHash : (_token: Token, _txid: Txid) -> (vec Hex) composite_query;
    getArchivedTxnBytes : (_token: Token, _txid: Txid) -> (vec record{ vec nat8; Time }) composite_query;
    getArchivedTxn : (_token: Token, _txid: Txid) -> (vec record{ TxnRecord; Time }) composite_query;
    getArchivedTxnByIndex : (_token: Token, _tokenBlockIndex: nat) -> (vec record{ TxnRecord; Time }) composite_query;
    getArchivedTokenTxns : (_token: Token, _start_desc: nat, _length: nat) -> (vec TxnRecord) composite_query;
    getArchivedAccountTxns : (_buckets_offset: opt nat, _buckets_length: nat, _account: AccountId, _token: opt Token, _page: opt nat32, _size: opt nat32) ->  
    (record {data: vec record{ principal; vec record{ TxnRecord; Time } }; totalPage: nat; total: nat});
 };
service : () -> ProxyRoot